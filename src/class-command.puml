@startuml
!include incl/skin.puml

title Command Structure
namespace Joomla.Command {
    class Controller {
        #CommandProcessor <b>processor</b>
        #Command[] <b>commands</b>
        #Dispatcher <b>dispatcher</b>
        +{abstract} <b>add</b>(Command)
        +{abstract} <b>addCommands</b>(Command[])
        +{abstract} <b>run</b>(Input, Output)
    }
    note as ControllerNote
        run(Input $input, Output $output) {
            // Determine command name from input
            $this->processor->executeCommand(
                $this->commands[$commandName],
                $input,
                $output
            );
        }
    end note

    Controller .right. ControllerNote

    interface Command {
        +{abstract} string <b>getName</b>();
        +{abstract} string <b>getDescription</b>();
        +{abstract} <b>execute</b>(Input, Output)
        +{abstract} <b>setDispatcher</b>(Dispatcher $dispatcher);
    }

    interface RecoverableCommand extends Command {
        +{abstract} <b>undo</b>()
        +{abstract} <b>redo</b>()
    }

    interface Dispatcher {
        +{abstract} <b>trigger</b>(string, mixed...)
    }
    Command -right-> Dispatcher: dispatcher

    class MacroCommand {
        +string <b>getName</b>();
        +string <b>getDescription</b>();
        +<b>execute</b>(Input, Output)
        +<b>setDispatcher</b>(Dispatcher $dispatcher);
        +<b>add</b>(Command)
        +<b>addCommands</b>(Command[])
    }

    class MacroCommand implements Command
    note as MacroCommandNote
    execute(Input $input, Output $output) {
        foreach ($this->commands as $command) {
            $command->execute($input, $output);
        }
    }
    end note
    MacroCommand .. MacroCommandNote

    Controller --> CommandProcessor
    class CommandProcessor {
        #Dispatcher <b>dispatcher</b>
        +<b>executeCommand</b>(Command, Input, Output)
    }
    CommandProcessor --> Command
    note as CommandProcessorNote
        executeCommand(Command $command, Input $input, Output $output) {
            if ($this->dispatcher->trigger('beforeExecute', $command)) {
                $command->setDispatcher($this->dispatcher);
                $command->execute($input, $output);
                $this->dispatcher->trigger('afterExecute', $command);
            }
        }
    end note
    CommandProcessor .right. CommandProcessorNote

    MacroCommand o--> "1..n" Command: commands
    Controller o--> "1..n" Command: commands
}
@enduml
